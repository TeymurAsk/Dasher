@* @page "/"
@inject IJSRuntime JS
@inject NavigationManager navman
@inject WorkersController workerscontroller
<PageTitle>Home</PageTitle>
<div style="display:flex">
    <Sidebar></Sidebar>
    <div class="main-area">
        <div class="container">
            <h1 class="label">The best specialists are here!</h1>
            <div class="searchbar">
                <input class="searchbar__input" type="search" placeholder="Search for contractor" @bind-value="searchquery"/>
                <button class="searchbar__btn" @onclick="()=> Search(searchquery)">
                    <svg class="searchbar__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.5 3.75a6.75 6.75 0 1 0 0 13.5 6.75 6.75 0 0 0 0-13.5ZM2.25 10.5a8.25 8.25 0 1 1 14.59 5.28l4.69 4.69a.75.75 0 1 1-1.06 1.06l-4.69-4.69A8.25 8.25 0 0 1 2.25 10.5Z" clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
            <div class="services">
                <div class="available__space">
                    <p class="available__label">Available now</p>
                    <div class="available__toggle" @onclick="()=> ToggleAvailability()"></div>
                </div>
                @foreach (var profession in professions)
                {
                    <button class="services__btn" @onclick="() => FilterByProfession(profession)">
                        @profession
                    </button>
                }
            </div>
            <div class="results">
                <p class="results__label">Results:&nbsp;  @filteredWorkers.Count</p>
            </div>
            <div class="candidates">
                @foreach(var filteredworker in filteredWorkers)
                {
                    <div class="card">
                        <div class="card__top">
                            <p class="card__top-hashtag">#Available now</p>
                            <div class="card__top-price">@filteredworker.HourlyPay PLN/h</div>
                        </div>
                        <div class="card__main">
                            <img class="card__main-img" src="!image1.png" />
                            <div>
                                <p class="card__main-title">@filteredworker.Name @filteredworker.Lastname</p>
                                <p class="card__main-subtitle">@filteredworker.JobTitle</p>
                                <p class="card__main-review"><i class="fa-solid fa-star"></i> @filteredworker.Rating (@filteredworker.CommentsCount)</p>
                            </div>
                        </div>
                        <div class="card__line"></div>
                        <div class="card__bio">
                            <p class="card__bio-text">
                                "@filteredworker.Bio"
                            </p>
                        </div>
                        <div class="card__bottom">
                            <button class="card__bottom-save">
                                <svg class="card__bottom-save-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
                                </svg>
                            </button>
                            <button class="card__bottom-details" @onclick='()=>{navman.NavigateTo("/details");}'>Details</button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code{
    private List<Worker> workers;
    private List<Worker> filteredWorkers;
    private bool showOnlyAvailable = false;
    private List<string> selectedProfessions = new List<string>();
    private List<string> professions = new List<string> { "Delivery", "Cleaning", "Waitress", "Waiter", "Plumber", "Hostess", "Manager" };
    private string searchquery = "";
    private List<string> search_words = new List<string>();
    protected override void OnInitialized()
    {
        workers = workerscontroller.Get();
        filteredWorkers = new List<Worker>(workers);
    }
    private void ToggleAvailability()
    {
        // showOnlyAvailable = !showOnlyAvailable;
        // FilterWorkers();
    }

    private void FilterByProfession(string profession)
    {
        // if (selectedProfessions.Contains(profession))
        // {
        //     selectedProfessions.Remove(profession);
        // }
        // else
        // {
        //     selectedProfessions.Add(profession);
        // }
        // FilterWorkers();
    }
    private void Search(string str)
    {
        // search_words = str.Split(" ").ToList();
        // FilterWorkers();
    }
    private void FilterWorkers()
    {
        // filteredWorkers.Clear();
        // foreach (var worker in workers)
        // {
        //     if ((selectedProfessions.Count==0 || selectedProfessions.Contains(worker.JobTitle)) &&
        //     (showOnlyAvailable==false || showOnlyAvailable == worker.IsAvailableNow) &&
        //     (string.IsNullOrEmpty(searchquery) || worker.Name.Contains(searchquery, StringComparison.OrdinalIgnoreCase) || worker.Lastname.Contains(searchquery, StringComparison.OrdinalIgnoreCase)))
        //     {
        //         filteredWorkers.Add(worker);
        //     }
        // }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("toggleChange");
            await JS.InvokeVoidAsync("btnClicked");
            await JS.InvokeVoidAsync("saveCandidate");
            await JS.InvokeVoidAsync("seeDetails");
        }
    }
} *@