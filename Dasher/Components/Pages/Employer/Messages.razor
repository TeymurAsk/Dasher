@page "/employer/messages"
@inject IJSRuntime JS
<PageTitle>Chat</PageTitle>
<Sidebar></Sidebar>
<div class="main-area">
    <div class="container">
        <div style="display:flex">
            <div>
                <div class="messages__input-wrapper">
                    <input class="messages__input" type="text" placeholder="Search" />
                </div>
                @for(int i = 0; i < 10; i++)
                {
                    <div class="messages__user-box">
                        <div>
                            <img class="user-box__img" src="!image1.png" />
                        </div>
                        <div>
                            <div style="display:flex">
                                <p class="user-box__title">Kate Jonhson</p>
                                <p class="user-box__time">15 min</p>
                            </div>
                            <p class="user-box__subtitle">Hey there! Just wanted to ask you about new feature</p>
                        </div>
                    </div>
                }
            </div>
            <div class="vertical-line"></div>
            <div class="chat-box">
                <div>
                    <p class="chat-box__title">Kate Johnson</p>
                    <div class="horizontal-line"></div>
                    <div class="chat-box__area" id="chatArea">
                        @foreach (var message in messages)
                        {
                            <div class="message @(message.IsUser ? "user-message" : "other-message")">
                                @message.Text
                            </div>
                        }
                        <div class="chat-input">
                            <input type="text" @bind="currentMessage" placeholder="Type a message..." class="chat-input__field" />
                            <button @onclick="SendMessage" class="chat-input__button">Send</button>
                        </div>
                    </div>
                </div>
                <div></div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<Message> messages = new List<Message>();
    private string currentMessage;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("truncateText", ".user-box__subtitle", 30);
        }
    }

    // Message model
    private class Message
    {
        public string Text { get; set; }
        public bool IsUser { get; set; }
    }

    // Send message function
    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage))
        {
            messages.Add(new Message { Text = currentMessage, IsUser = true });
            currentMessage = string.Empty;

            // Scroll to the bottom of chat area after sending
            await JS.InvokeVoidAsync("scrollToBottom", "chatArea");
        }
    }
}
